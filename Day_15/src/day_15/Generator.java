package day_15;

public class Generator {
    private long previous;
    private long lastGenerated = -1;
    private long factor;
    private long multipleConstraint;

    private static long DIVISOR = 2147483647;

    /** Creates a new generator with its initial value and generation factor set.
        This generator considers all values valid.*/
    public Generator(long _initialValue, long _factor) {
        previous = _initialValue;
        factor = _factor;
        multipleConstraint = 1;
    }

    /** Creates a new Generator with its initial value, generation factor and constraint set.
        Only values divisible by the constraint are considered valid values.*/
    public Generator(long _initialValue, long _factor, long _multipleConstraint) {
        previous = _initialValue;
        factor = _factor;
        multipleConstraint = _multipleConstraint;
    }

    /** Generates values until a valid value is generated, then returns that value.
        @return The first valid value generated. */
    public long getNextValue() {
        while( generate() == false){}
        return getLastGeneratedValue();
    }

    /** Generates a new value.
        @return Boolean value indicating if the newly generated value was valid.*/
    private boolean generate() {
        previous = (previous * factor) % DIVISOR;

        if (previous % multipleConstraint == 0) {
            lastGenerated = previous;
            return true;
        }
        return false;
    }

    /** Returns the last valid value generated by this Generator. Returns -1
        if the Generator has not yet generated a valid value.
        @return The last valid value generated. -1 if none have been generated yet.*/
    public long getLastGeneratedValue() {
        return lastGenerated;
    }
}
